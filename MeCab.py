# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _MeCab.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_MeCab')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_MeCab')
    _MeCab = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MeCab', [dirname(__file__)])
        except ImportError:
            import _MeCab
            return _MeCab
        try:
            _mod = imp.load_module('_MeCab', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _MeCab = swig_import_helper()
    del swig_import_helper
else:
    import _MeCab
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class DictionaryInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    filename = _swig_property(_MeCab.DictionaryInfo_filename_get)
    charset = _swig_property(_MeCab.DictionaryInfo_charset_get)
    size = _swig_property(_MeCab.DictionaryInfo_size_get)
    type = _swig_property(_MeCab.DictionaryInfo_type_get)
    lsize = _swig_property(_MeCab.DictionaryInfo_lsize_get)
    rsize = _swig_property(_MeCab.DictionaryInfo_rsize_get)
    version = _swig_property(_MeCab.DictionaryInfo_version_get)
    next = _swig_property(_MeCab.DictionaryInfo_next_get)

    def __init__(self):
        _MeCab.DictionaryInfo_swiginit(self, _MeCab.new_DictionaryInfo())
    __swig_destroy__ = _MeCab.delete_DictionaryInfo
DictionaryInfo_swigregister = _MeCab.DictionaryInfo_swigregister
DictionaryInfo_swigregister(DictionaryInfo)

class Path(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    rnode = _swig_property(_MeCab.Path_rnode_get)
    rnext = _swig_property(_MeCab.Path_rnext_get)
    lnode = _swig_property(_MeCab.Path_lnode_get)
    lnext = _swig_property(_MeCab.Path_lnext_get)
    cost = _swig_property(_MeCab.Path_cost_get)
    prob = _swig_property(_MeCab.Path_prob_get, _MeCab.Path_prob_set)
Path_swigregister = _MeCab.Path_swigregister
Path_swigregister(Path)

class Node(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    prev = _swig_property(_MeCab.Node_prev_get)
    next = _swig_property(_MeCab.Node_next_get)
    enext = _swig_property(_MeCab.Node_enext_get)
    bnext = _swig_property(_MeCab.Node_bnext_get)
    rpath = _swig_property(_MeCab.Node_rpath_get)
    lpath = _swig_property(_MeCab.Node_lpath_get)
    feature = _swig_property(_MeCab.Node_feature_get)
    id = _swig_property(_MeCab.Node_id_get)
    length = _swig_property(_MeCab.Node_length_get)
    rlength = _swig_property(_MeCab.Node_rlength_get)
    rcAttr = _swig_property(_MeCab.Node_rcAttr_get)
    lcAttr = _swig_property(_MeCab.Node_lcAttr_get)
    posid = _swig_property(_MeCab.Node_posid_get)
    char_type = _swig_property(_MeCab.Node_char_type_get)
    stat = _swig_property(_MeCab.Node_stat_get)
    isbest = _swig_property(_MeCab.Node_isbest_get)
    alpha = _swig_property(_MeCab.Node_alpha_get)
    beta = _swig_property(_MeCab.Node_beta_get)
    prob = _swig_property(_MeCab.Node_prob_get, _MeCab.Node_prob_set)
    wcost = _swig_property(_MeCab.Node_wcost_get)
    cost = _swig_property(_MeCab.Node_cost_get)
    surface = _swig_property(_MeCab.Node_surface_get)
Node_swigregister = _MeCab.Node_swigregister
Node_swigregister(Node)

MECAB_NOR_NODE = _MeCab.MECAB_NOR_NODE
MECAB_UNK_NODE = _MeCab.MECAB_UNK_NODE
MECAB_BOS_NODE = _MeCab.MECAB_BOS_NODE
MECAB_EOS_NODE = _MeCab.MECAB_EOS_NODE
MECAB_EON_NODE = _MeCab.MECAB_EON_NODE
MECAB_SYS_DIC = _MeCab.MECAB_SYS_DIC
MECAB_USR_DIC = _MeCab.MECAB_USR_DIC
MECAB_UNK_DIC = _MeCab.MECAB_UNK_DIC
MECAB_ONE_BEST = _MeCab.MECAB_ONE_BEST
MECAB_NBEST = _MeCab.MECAB_NBEST
MECAB_PARTIAL = _MeCab.MECAB_PARTIAL
MECAB_MARGINAL_PROB = _MeCab.MECAB_MARGINAL_PROB
MECAB_ALTERNATIVE = _MeCab.MECAB_ALTERNATIVE
MECAB_ALL_MORPHS = _MeCab.MECAB_ALL_MORPHS
MECAB_ALLOCATE_SENTENCE = _MeCab.MECAB_ALLOCATE_SENTENCE
MECAB_ANY_BOUNDARY = _MeCab.MECAB_ANY_BOUNDARY
MECAB_TOKEN_BOUNDARY = _MeCab.MECAB_TOKEN_BOUNDARY
MECAB_INSIDE_TOKEN = _MeCab.MECAB_INSIDE_TOKEN
class Lattice(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _MeCab.delete_Lattice

    def __init__(self):
        _MeCab.Lattice_swiginit(self, _MeCab.new_Lattice())
Lattice.clear = new_instancemethod(_MeCab.Lattice_clear, None, Lattice)
Lattice.is_available = new_instancemethod(_MeCab.Lattice_is_available, None, Lattice)
Lattice.bos_node = new_instancemethod(_MeCab.Lattice_bos_node, None, Lattice)
Lattice.eos_node = new_instancemethod(_MeCab.Lattice_eos_node, None, Lattice)
Lattice.end_nodes = new_instancemethod(_MeCab.Lattice_end_nodes, None, Lattice)
Lattice.begin_nodes = new_instancemethod(_MeCab.Lattice_begin_nodes, None, Lattice)
Lattice.sentence = new_instancemethod(_MeCab.Lattice_sentence, None, Lattice)
Lattice.size = new_instancemethod(_MeCab.Lattice_size, None, Lattice)
Lattice.set_Z = new_instancemethod(_MeCab.Lattice_set_Z, None, Lattice)
Lattice.Z = new_instancemethod(_MeCab.Lattice_Z, None, Lattice)
Lattice.set_theta = new_instancemethod(_MeCab.Lattice_set_theta, None, Lattice)
Lattice.theta = new_instancemethod(_MeCab.Lattice_theta, None, Lattice)
Lattice.next = new_instancemethod(_MeCab.Lattice_next, None, Lattice)
Lattice.request_type = new_instancemethod(_MeCab.Lattice_request_type, None, Lattice)
Lattice.has_request_type = new_instancemethod(_MeCab.Lattice_has_request_type, None, Lattice)
Lattice.set_request_type = new_instancemethod(_MeCab.Lattice_set_request_type, None, Lattice)
Lattice.add_request_type = new_instancemethod(_MeCab.Lattice_add_request_type, None, Lattice)
Lattice.remove_request_type = new_instancemethod(_MeCab.Lattice_remove_request_type, None, Lattice)
Lattice.newNode = new_instancemethod(_MeCab.Lattice_newNode, None, Lattice)
Lattice.toString = new_instancemethod(_MeCab.Lattice_toString, None, Lattice)
Lattice.enumNBestAsString = new_instancemethod(_MeCab.Lattice_enumNBestAsString, None, Lattice)
Lattice.has_constraint = new_instancemethod(_MeCab.Lattice_has_constraint, None, Lattice)
Lattice.boundary_constraint = new_instancemethod(_MeCab.Lattice_boundary_constraint, None, Lattice)
Lattice.feature_constraint = new_instancemethod(_MeCab.Lattice_feature_constraint, None, Lattice)
Lattice.set_boundary_constraint = new_instancemethod(_MeCab.Lattice_set_boundary_constraint, None, Lattice)
Lattice.set_feature_constraint = new_instancemethod(_MeCab.Lattice_set_feature_constraint, None, Lattice)
Lattice.set_result = new_instancemethod(_MeCab.Lattice_set_result, None, Lattice)
Lattice.what = new_instancemethod(_MeCab.Lattice_what, None, Lattice)
Lattice.set_what = new_instancemethod(_MeCab.Lattice_set_what, None, Lattice)
Lattice.set_sentence = new_instancemethod(_MeCab.Lattice_set_sentence, None, Lattice)
Lattice_swigregister = _MeCab.Lattice_swigregister
Lattice_swigregister(Lattice)

class Model(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    version = staticmethod(_MeCab.Model_version)
    __swig_destroy__ = _MeCab.delete_Model

    def __init__(self, *args):
        _MeCab.Model_swiginit(self, _MeCab.new_Model(*args))
Model.dictionary_info = new_instancemethod(_MeCab.Model_dictionary_info, None, Model)
Model.transition_cost = new_instancemethod(_MeCab.Model_transition_cost, None, Model)
Model.lookup = new_instancemethod(_MeCab.Model_lookup, None, Model)
Model.createTagger = new_instancemethod(_MeCab.Model_createTagger, None, Model)
Model.createLattice = new_instancemethod(_MeCab.Model_createLattice, None, Model)
Model.swap = new_instancemethod(_MeCab.Model_swap, None, Model)
Model_swigregister = _MeCab.Model_swigregister
Model_swigregister(Model)

def Model_version():
    return _MeCab.Model_version()
Model_version = _MeCab.Model_version

class Tagger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _MeCab.delete_Tagger
    version = staticmethod(_MeCab.Tagger_version)

    def __init__(self, *args):
        _MeCab.Tagger_swiginit(self, _MeCab.new_Tagger(*args))
Tagger.parse = new_instancemethod(_MeCab.Tagger_parse, None, Tagger)
Tagger.parseToNode = new_instancemethod(_MeCab.Tagger_parseToNode, None, Tagger)
Tagger.parseNBest = new_instancemethod(_MeCab.Tagger_parseNBest, None, Tagger)
Tagger.parseNBestInit = new_instancemethod(_MeCab.Tagger_parseNBestInit, None, Tagger)
Tagger.nextNode = new_instancemethod(_MeCab.Tagger_nextNode, None, Tagger)
Tagger.next = new_instancemethod(_MeCab.Tagger_next, None, Tagger)
Tagger.formatNode = new_instancemethod(_MeCab.Tagger_formatNode, None, Tagger)
Tagger.set_request_type = new_instancemethod(_MeCab.Tagger_set_request_type, None, Tagger)
Tagger.request_type = new_instancemethod(_MeCab.Tagger_request_type, None, Tagger)
Tagger.partial = new_instancemethod(_MeCab.Tagger_partial, None, Tagger)
Tagger.set_partial = new_instancemethod(_MeCab.Tagger_set_partial, None, Tagger)
Tagger.lattice_level = new_instancemethod(_MeCab.Tagger_lattice_level, None, Tagger)
Tagger.set_lattice_level = new_instancemethod(_MeCab.Tagger_set_lattice_level, None, Tagger)
Tagger.all_morphs = new_instancemethod(_MeCab.Tagger_all_morphs, None, Tagger)
Tagger.set_all_morphs = new_instancemethod(_MeCab.Tagger_set_all_morphs, None, Tagger)
Tagger.set_theta = new_instancemethod(_MeCab.Tagger_set_theta, None, Tagger)
Tagger.theta = new_instancemethod(_MeCab.Tagger_theta, None, Tagger)
Tagger.dictionary_info = new_instancemethod(_MeCab.Tagger_dictionary_info, None, Tagger)
Tagger.what = new_instancemethod(_MeCab.Tagger_what, None, Tagger)
Tagger.parseToString = new_instancemethod(_MeCab.Tagger_parseToString, None, Tagger)
Tagger_swigregister = _MeCab.Tagger_swigregister
Tagger_swigregister(Tagger)

def Tagger_version():
    return _MeCab.Tagger_version()
Tagger_version = _MeCab.Tagger_version

VERSION = _MeCab.VERSION


